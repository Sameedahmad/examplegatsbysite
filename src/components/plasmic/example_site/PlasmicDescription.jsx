// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5JPQX3dHSUEXyotTfHZPL8
// Component: Hp5zwPj1bcQbh
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_example_site.module.css" // plasmic-import: 5JPQX3dHSUEXyotTfHZPL8/projectcss
import * as sty from "./PlasmicDescription.module.css" // plasmic-import: Hp5zwPj1bcQbh/css
import PlasmicLogoIcon from "./icons/PlasmicIcon__PlasmicLogo" // plasmic-import: C2UdNRLsDLsqvs/icon

export const PlasmicDescription__VariantProps = new Array()

export const PlasmicDescription__ArgProps = new Array(
  "profilepic",
  "description"
)

function PlasmicDescription__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <PlasmicLogoIcon
            className={classNames(defaultcss.all, sty.svg__qOgGk)}
            role={"img"}
          />
        ),

        value: args.profilepic,
      })}

      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(defaultcss.all, sty.box)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Built with love by the Plasmic team. ",
          value: args.description,
        })}
      </div>
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root", "box"],
  box: ["box"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDescription__ArgProps,
      internalVariantPropNames: PlasmicDescription__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicDescription__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicDescription"
  } else {
    func.displayName = `PlasmicDescription.${nodeName}`
  }
  return func
}

export const PlasmicDescription = Object.assign(
  // Top-level PlasmicDescription renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    // Metadata about props expected for PlasmicDescription
    internalVariantProps: PlasmicDescription__VariantProps,
    internalArgProps: PlasmicDescription__ArgProps,
  }
)

export default PlasmicDescription
/* prettier-ignore-end */
