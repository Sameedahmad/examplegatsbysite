// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5JPQX3dHSUEXyotTfHZPL8
// Component: 7759f9YNNCJJf
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_example_site.module.css" // plasmic-import: 5JPQX3dHSUEXyotTfHZPL8/projectcss
import * as sty from "./PlasmicListItem.module.css" // plasmic-import: 7759f9YNNCJJf/css

export const PlasmicListItem__VariantProps = new Array("noBody")

export const PlasmicListItem__ArgProps = new Array(
  "title",
  "_package",
  "children"
)

function PlasmicListItem__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__noBody]: hasVariant(variants, "noBody", "noBody"),
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__hdNQz, {
          [sty.box__noBody__hdNQzl6Tay]: hasVariant(
            variants,
            "noBody",
            "noBody"
          ),
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Component",
          value: args.title,
          className: classNames(sty.slotTitle),
        })}

        {p.renderPlasmicSlot({
          defaultContents: "package",
          value: args._package,
          className: classNames(sty.slotPackage),
        })}
      </p.Stack>

      {(hasVariant(variants, "noBody", "noBody") ? false : true) ? (
        <div
          className={classNames(defaultcss.all, sty.box__wTih, {
            [sty.box__noBody__wTihl6Tay]: hasVariant(
              variants,
              "noBody",
              "noBody"
            ),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Show the components here",
            value: args.children,
            className: classNames(sty.slotChildren),
          })}
        </div>
      ) : null}
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicListItem__ArgProps,
      internalVariantPropNames: PlasmicListItem__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicListItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicListItem"
  } else {
    func.displayName = `PlasmicListItem.${nodeName}`
  }
  return func
}

export const PlasmicListItem = Object.assign(
  // Top-level PlasmicListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicListItem
    internalVariantProps: PlasmicListItem__VariantProps,
    internalArgProps: PlasmicListItem__ArgProps,
  }
)

export default PlasmicListItem
/* prettier-ignore-end */
